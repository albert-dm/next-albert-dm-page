{"ast":null,"code":"var _jsxFileName = \"/home/barbara/next-albert-dm-page/src/pages/_document.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { createGlobalStyle, ServerStyleSheet } from 'styled-components';\nconst GlobalStyle = createGlobalStyle`\n  * {\n  font-family: 'Roboto', sans-serif;\n  font-weight: 700;\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  h1 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 40px;\n  }\n  h2 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 24px;\n  }\n  h3 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 16px;\n  }\n  p {\n    font-size: 14px;\n    padding: 5px 0;\n  }\n  body {\n    padding-top: 150px;\n\n   \n  }\n  };\n`;\nexport default class MyDocument extends Document {\n  static getInitialProps({\n    renderPage\n  }) {\n    const sheet = new ServerStyleSheet();\n    const page = renderPage(App => props => sheet.collectStyles(__jsx(React.Fragment, null, __jsx(GlobalStyle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }), __jsx(App, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    })))));\n    const styleTags = sheet.getStyleElement();\n    return _objectSpread(_objectSpread({}, page), {}, {\n      styleTags\n    });\n  }\n\n  render() {\n    return __jsx(Html, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, this.props.styleTags), __jsx(\"body\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, __jsx(Main, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), __jsx(NextScript, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/barbara/next-albert-dm-page/src/pages/_document.js"],"names":["React","Document","Html","Head","Main","NextScript","createGlobalStyle","ServerStyleSheet","GlobalStyle","MyDocument","getInitialProps","renderPage","sheet","page","App","props","collectStyles","styleTags","getStyleElement","render"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,UAApC,QAAsD,eAAtD;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,mBAApD;AAEA,MAAMC,WAAW,GAAGF,iBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtC;AAkCA,eAAe,MAAMG,UAAN,SAAyBR,QAAzB,CAAkC;AAC/C,SAAOS,eAAP,CAAuB;AAAEC,IAAAA;AAAF,GAAvB,EAAuC;AACrC,UAAMC,KAAK,GAAG,IAAIL,gBAAJ,EAAd;AACA,UAAMM,IAAI,GAAGF,UAAU,CAAEG,GAAD,IAAUC,KAAD,IAC/BH,KAAK,CAACI,aAAN,CACE,4BACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,GAAD,eAASD,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF,CADF,CADqB,CAAvB;AAQA,UAAME,SAAS,GAAGL,KAAK,CAACM,eAAN,EAAlB;AACA,2CAAYL,IAAZ;AAAkBI,MAAAA;AAAlB;AACD;;AAGDE,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKJ,KAAL,CAAWE,SADd,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAJF,CADF;AAWD;;AA5B8C","sourcesContent":["import React from 'react';\nimport Document, {Html, Head, Main, NextScript } from 'next/document';\nimport { createGlobalStyle, ServerStyleSheet } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n  font-family: 'Roboto', sans-serif;\n  font-weight: 700;\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  h1 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 40px;\n  }\n  h2 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 24px;\n  }\n  h3 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 16px;\n  }\n  p {\n    font-size: 14px;\n    padding: 5px 0;\n  }\n  body {\n    padding-top: 150px;\n\n   \n  }\n  };\n`;\n\nexport default class MyDocument extends Document {\n  static getInitialProps({ renderPage }) {\n    const sheet = new ServerStyleSheet();\n    const page = renderPage((App) => (props) =>\n      sheet.collectStyles(\n        <>\n          <GlobalStyle/>\n          <App {...props} />\n        </>\n      ),\n    );\n    const styleTags = sheet.getStyleElement();\n    return { ...page, styleTags };\n  }\n\n\n  render() {\n    return (\n      <Html>\n        <Head>    \n          {this.props.styleTags}\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}