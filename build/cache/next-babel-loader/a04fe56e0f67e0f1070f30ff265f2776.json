{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { createGlobalStyle, ServerStyleSheet } from 'styled-components';\nconst GlobalStyle = createGlobalStyle`\n  * {\n  font-family: 'Roboto', sans-serif;\n  font-weight: 700;\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  h1 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 40px;\n  }\n  h2 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 24px;\n  }\n  h3 {\n    font-family: 'Coda', cursive;\n    font-weight: 800;\n    font-size: 16px;\n  }\n  p {\n    font-size: 14px;\n    padding: 5px 0;\n  }\n  body {\n    padding-top: 150px;\n\n   \n  }\n  };\n`;\nexport default class MyDocument extends Document {\n  static getInitialProps({\n    renderPage\n  }) {\n    const sheet = new ServerStyleSheet();\n    const page = renderPage(App => props => sheet.collectStyles(__jsx(React.Fragment, null, __jsx(GlobalStyle, null), __jsx(App, props))));\n    const styleTags = sheet.getStyleElement();\n    return _objectSpread(_objectSpread({}, page), {}, {\n      styleTags\n    });\n  }\n\n  render() {\n    return __jsx(Html, null, __jsx(Head, null, this.props.styleTags, __jsx(\"link\", {\n      href: \"https://fonts.googleapis.com/css2?family=Coda:wght@400;800&family=Roboto:wght@400;700&display=swap\",\n      rel: \"stylesheet\"\n    })), __jsx(\"body\", null, __jsx(Main, null), __jsx(NextScript, null)));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}